

~/# git status                  # should display nothing to commit
~/# git checkout -b bootstrap   # checkout a new branch
~/# git branch                  # view branches


~/# bundle exec rspec 


# If your spec/controllers/micro_posts_controller_spec.rb 
# is failing, be sure to update the valid_attributes function
--------------------spec/controllers/micro_posts_controller_spec.rb 
def valid_attributes
 { "user_id" => "1", "content" => "hello world" }
end
--------------------------------------------------------------------------------


# add this line to app/models/user.rb
--------------------app/models/user.rb
has_many :micro_posts
--------------------------------------------------------------------------------


# add this line to app/models/micro_post.rb
--------------------app/models/micro_post.rb
belongs_to :user
--------------------------------------------------------------------------------


--------------------spec/requests/user_spec.rb
require 'spec_helper'

describe "GET /users/id" do
  
  before do
    @user = User.create! name: "Matt", email: "goggin13@gmail.com"
    3.times { |i| @user.micro_posts.create! content: "hello world - #{i}" }
  end

  it "should display the number of posts the user has" do
    visit user_path(@user)
    page.should have_content("3 MicroPosts")
  end

  it "should list the content for each micro post " do
    visit user_path(@user)
    3.times do |i|
      page.should have_content "hello world - #{i}"
    end
  end
end
--------------------------------------------------------------------------------


~/# bundle exec rspec spec/requests/user_spec.rb


--------------------app/views/micro_posts/_micro_post.html.erb
<p>
  <span class='micro_post_timestamp'>
     <%= micro_post.created_at.strftime("%m/%d %l-%M") %>
   </span> 
   <%= micro_post.content %>
</p>
--------------------------------------------------------------------------------


--------------------app/views/users/show.html.erb
<p id="notice"><%= notice %></p>

<p>
  <b>Name:</b>
  <%= @user.name %>
</p>

<p>
  <b>Email:</b>
  <%= @user.email %>
</p>

<p>
  <%= pluralize(@user.micro_posts.length, "MicroPost") %>
</p>

<%= render @user.micro_posts %>

<%= link_to 'Edit', edit_user_path(@user) %> |
<%= link_to 'Back', users_path %>
--------------------------------------------------------------------------------


~/# bundle exec rspec spec/requests/user_spec.rb


# Add this line to our Gemfile (right below the Rails gem is fine)
--------------------Gemfile
gem 'bootstrap-sass', '2.2.2.0'
--------------------------------------------------------------------------------


~/# bundle install


--------------------app/views/layouts/application.html.erb
<!DOCTYPE html>
<html>
<head>
  <title><%= full_title(yield(:title)) %></title>
  <%= stylesheet_link_tag    "application", :media => "all" %>
  <%= javascript_include_tag "application" %>
  <%= csrf_meta_tags %>
</head>
<body>

  <%= render 'layouts/header' %>

  <div class="container"> 
    <%= yield %>
    <hr />
    <%= render 'layouts/footer' %>
  </div>

</body>
</html>
--------------------------------------------------------------------------------


--------------------app/views/layouts/_header.html.erb
<div class="navbar navbar-inverse navbar-fixed-top">
  <div class="navbar-inner">
    <div class="container">

      <%= link_to "MicroPoster", root_path, class: 'brand' %>

      <div class="nav-collapse collapse">
        <ul class="nav">
          <li><%= link_to 'Home', root_path %></li>
          <li><%= link_to 'Help', static_pages_help_path %></li>
          <li><%= link_to 'About', static_pages_about_path %></li>
          <li><%= link_to 'My Profile', '#' %></li>
          <li><%= link_to 'My Account', '#' %></li>
          <li><%= link_to 'Logout', '#' %></li>
        </ul>

      </div><!--/.nav-collapse -->
    </div>
  </div>
</div>
--------------------------------------------------------------------------------


--------------------app/views/layouts/_footer.html.erb
<footer>
  
  <small>
    <%= link_to 'Rails Tutorial', 'http://railstutorial.org/' %>
    by Michael Hartl
  </small>
  | 
  <%= link_to "INFO2310", 'http://curails.herokuapp.com' %>

</footer>
--------------------------------------------------------------------------------


--------------------app/views/static_pages/about.html.erb
<% provide(:title, 'About') %>
<div class='row'>
  <div class='span12'>
    <h1>About</h1>
    <p>
      Like Twitter... but better
    </p>
  </div>
</div>
--------------------------------------------------------------------------------


--------------------app/views/static_pages/help.html.erb
<% provide(:title, 'Help') %>
<div class='row'>
  <div class='span12'>
    <h1>Help</h1>
    <p>
      Get help on the INFO2310 MicroPoster at 
      <a href="http://curails.herokuapp.com">the course website</a>
    </p>
  </div>
</div>
--------------------------------------------------------------------------------


--------------------app/views/static_pages/home.html.erb
<% provide(:title, 'Home') %>
<div class="hero-unit">
  <h1>INFO 2310 MicroPoster</h1>
  <p>
    This is a sample website used in INFO 2310 to learn Ruby on Rails.  Please
    sign up and share your thoughts with us in 5-140 character chunks.
  </p>
  
  <p>
    <%= link_to 'Sign Up', new_user_path, class: 'btn btn-primary btn-large' %>
  </p>

</div>
--------------------------------------------------------------------------------


--------------------app/assets/stylesheets/custom.css.scss
@import "bootstrap";

/* universal */

html {
  overflow-y: scroll;
}

body {
  padding-top: 60px;
}

section {
  overflow: auto;
}

textarea {
  resize: vertical;
}

.center {
  text-align: center;
}

.center h1 {
  margin-bottom: 10px;
}
--------------------------------------------------------------------------------


--------------------config/routes.rb
Info2310::Application.routes.draw do
  resources :micro_posts
  resources :users

  get "static_pages/home"
  get "static_pages/help"
  get "static_pages/about"

  root to: 'static_pages#home'
end
--------------------------------------------------------------------------------


~/# bundle exec rspec


~/# rails generate migration add_hashed_password_and_salt_to_users hashed_password:string salt:string
~/# bundle exec rake db:migrate
~/# bundle exec rake db:test:prepare


--------------------spec/models/user_spec.rb
require 'spec_helper'

describe User do

  before do
    @user = User.new(name: "Example User", 
                     email: "user@example.com",
                     password: "foobar")
  end

  describe "with valid attributes" do
    
    it "should be valid" do
      @user.should be_valid
    end
  end
  
  describe "without a name" do
    
    before do
      @user.name = ""
    end
    
    it "should not be valid" do
      @user.should_not be_valid
    end
  end
  
  describe "without an email" do
    
    before do
      @user.email = ""
    end
  
    it "should not be valid" do
      @user.should_not be_valid
    end    
  end
  
  describe "without a password" do
    
    before do
      @user.password = ""
    end
    
    it "should not be valid" do
      @user.should_not be_valid
    end
  end
  
  describe "hashed_password" do
    
    it "should be populated after the user has been saved" do
      @user.save
      @user.hashed_password.should_not be_blank
    end
  end
  
  describe "salt" do
    
    it "should be populated after the user has been saved" do
      @user.save
      @user.salt.should_not be_blank
    end
  end
end
--------------------------------------------------------------------------------


~/# bundle exec rspec spec/models/user_spec.rb


--------------------app/models/user.rb
class User < ActiveRecord::Base
  attr_accessor :password
  attr_accessible :email, :name, :password
  
  validates :password, presence: true
  
  validates :name, presence: true,
                      length: { minimum: 4, maximum: 50 }

  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  validates :email, presence: true,
                        format: { with: VALID_EMAIL_REGEX },
                      uniqueness: { case_sensitive: false }
  
  has_many :micro_posts

  before_save :encrypt_password
                
  def encrypt_password
    self.salt ||= Digest::SHA256.hexdigest("--#{Time.now.to_s}- -#{email}--")
    self.hashed_password = encrypt(password)
  end

  def encrypt(raw_password)
    Digest::SHA256.hexdigest("--#{salt}--#{raw_password}--")
  end
end
--------------------------------------------------------------------------------


~/# bundle exec rspec spec/models/user_spec.rb
~/# bundle exec rspec


# just replace the valid_attributes function
--------------------spec/controllers/users_controller_spec.rb
def valid_attributes
  { "name" => "MyString", "email" => "matt@hotmail.com", "password" => "foobar" }
end
--------------------------------------------------------------------------------


# replace the call to User.create! so it has a password
--------------------spec/requests/user_spec.rb
@user = User.create! name: "Matt", 
                     email: "goggin13@gmail.com",
                     password: "foobar"
--------------------------------------------------------------------------------


~/# bundle exec rspec


# add this field to the user form
--------------------app/views/users/_form.html.erb
<div class="field">
  <%= f.label :password %><br />
  <%= f.password_field :password %>
</div>
--------------------------------------------------------------------------------


# just replace the 'describe "with valid attributes" do' block
--------------------spec/models/user_spec.rb
describe "with valid attributes" do
  
  it "should be valid" do
    @user.should be_valid
  end

  it "should be valid if it has an encrypted_password but no password" do
    @user.save
    @user.password = nil
    @user.should be_valid
  end
end
--------------------------------------------------------------------------------


~/# bundle exec rspec spec/models/user_spec.rb


update the password validation in the User class
--------------------app/models/user.rb
validates :password, presence: true, if: "hashed_password.blank?"
--------------------------------------------------------------------------------


~/# bundle exec rspec spec/models/user_spec.rb


--------------------spec/models/user_spec.rb
require 'spec_helper'

describe User do

  before do
    @user = User.new(name: "Example User", 
                     email: "user@example.com",
                     password: "foobar")
  end

  describe "with valid attributes" do

    it "should be valid" do
      @user.should be_valid
    end

    it "should be valid if it has an encrypted_password but no password" do
      @user.save
      @user.password = nil
      @user.should be_valid
    end
  end
  
  describe "without a name" do
    
    before do
      @user.name = ""
    end
    
    it "should not be valid" do
      @user.should_not be_valid
    end
  end
  
  describe "without an email" do
    
    before do
      @user.email = ""
    end
  
    it "should not be valid" do
      @user.should_not be_valid
    end    
  end
        
  describe "without a password" do
    
    before do
      @user.password = ""
    end
    
    it "should not be valid" do
      @user.should_not be_valid
    end
  end
  
  describe "hashed_password" do
    
    it "should be populated after the user has been saved" do
      @user.save
      @user.hashed_password.should_not be_blank
    end
  end
  
  describe "salt" do
    
    it "should be populated after the user has been saved" do
      @user.save
      @user.salt.should_not be_blank
    end
  end
  
  describe "authenticate" do

    before do
      @user.save
    end

    it "should return the user with correct credentials" do
      User.authenticate(@user.email, @user.password).should == @user
    end

    it "should return nil if the given email does not exist" do
      User.authenticate("noone@example.com", @user.password).should be_nil
    end

    it "should return nil if the wrong password is provided" do
      User.authenticate(@user.email, "wrong_password").should be_nil
    end
  end  
end
--------------------------------------------------------------------------------


~/# bundle exec rspec spec/models/user_spec.rb


--------------------app/models/user.rb
class User < ActiveRecord::Base
  attr_accessor :password
  attr_accessible :email, :name, :password
  
  validates :password, presence: true, if: "hashed_password.blank?"
  
  validates :name, presence: true,
                      length: { minimum: 4, maximum: 50 }

  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  validates :email, presence: true,
                        format: { with: VALID_EMAIL_REGEX },
                      uniqueness: { case_sensitive: false }
  
  has_many :micro_posts

  before_save :encrypt_password
                
  def encrypt_password
    self.salt ||= Digest::SHA256.hexdigest("--#{Time.now.to_s}- -#{email}--")
    self.hashed_password = encrypt(password)
  end

  def encrypt(raw_password)
    Digest::SHA256.hexdigest("--#{salt}--#{raw_password}--")
  end
  
  def self.authenticate(email, plain_text_password)
    nil
  end
end
--------------------------------------------------------------------------------


git status                    # see what we modified
git add -A                    # add all the changes
git commit -m "User model"


git checkout master           # merge it back into master
git merge bootstrap

git push origin master            # github
git push heroku master            # heroku
heroku run rake db:migrate        # apply database migrations to production
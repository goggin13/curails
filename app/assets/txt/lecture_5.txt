
--------------------My solution to User.authenticate
def has_password?(raw_password)
  hashed_password == encrypt(raw_password)
end

def self.authenticate(email, plain_text_password)
  user = User.find_by_email(email)
  user && user.has_password?(plain_text_password) ? user : nil
end
--------------------------------------------------------------------------------  


--------------------spec/requests/session_spec.rb
require 'spec_helper'

describe "Session Requests" do
  
  before do
    @user = User.create! name: "Matt", email: "goggin13@gmail.com", password: "foobar"
  end

  describe "login form" do
    
    describe "link" do
  
      it "should be displayed in the header" do
        visit root_path
        page.should have_link("Login", href: new_session_path)
      end
    end
    
    describe "elements" do
      
      before do
        visit new_session_path
      end

      it "should have a field for session[:email]" do
        page.should have_field 'session[email]'
      end
      
      it "should have a field for session[:password]" do
        page.should have_field 'session[password]'
      end

      it "should have a login button" do
        page.should have_button "Login"
      end

      it "should post to sessions_path" do
        page.should have_css "form[action='#{sessions_path}'][method='post']"
      end
    end
  end

  describe "login form submission" do
    
    before do
      visit new_session_path
    end

    describe "on success" do
      
      before do
        fill_in "Email", with: @user.email
        fill_in "Password", with: @user.password
        click_button "Login"
      end
      
      it "should redirect to the users profile page" do
         current_path.should == user_path(@user)
      end

      it "should display a welcome message" do
        page.should have_content "Welcome, #{@user.email}!"
      end
    end

    describe "on failure" do

      before do
        fill_in "Email", with: @user.email
        fill_in "Password", with: "WRONG_PASSWORD"
        click_button "Login"
      end

      it "should display the login form again" do
        current_path.should == new_session_path
      end

      it "should display an error message" do
        page.should have_content "Invalid email/password combination"
      end
    end
  end

  describe "customized header" do
    
    describe "authenticated" do
      
      before do
        visit new_session_path
        fill_in "Email", with: @user.email
        fill_in "Password", with: @user.password
        click_button "Login"
        visit root_path
      end

      it "should not display a login link" do
        page.should_not have_link "Login"
      end

      it "should display a logout link" do
        page.should have_link "Logout"
      end

      it "should have a link to the current user's profile" do
        page.should have_link("My Profile", href: user_path(@user))
      end

      it "should have a link to the current user's account page" do
        page.should have_link("My Account", href: edit_user_path(@user))
      end

      it "should not have a sign up link on the home page" do
        page.should_not have_link "Sign Up"
      end
    end

    describe "anonymous" do
      
      before do
        visit root_path
      end

      it "should display a login link" do
        page.should have_link "Login"
      end

      it "should not display a logout link" do
        page.should_not have_link "Logout"
      end

      it "should not have a My Profile link" do
        page.should_not have_link("My Profile")
      end

      it "should not have a My Account link" do
        page.should_not have_link("My Account")
      end

      it "should have a sign up link on the home page" do
        page.should have_link("Sign Up")
      end
    end
  end

  describe "logging out" do

    before do
      visit new_session_path
      fill_in "Email", with: @user.email
      fill_in "Password", with: @user.password
      click_button "Login"
      click_link "Logout"
    end
    
    it "should redirect to the home page" do
      current_path.should == root_path
    end

    it "should display a farewell message" do
      page.should have_content "Logged out #{@user.email}"
    end

    it "should redisplay the login link" do
      page.should have_link("Login", href: new_session_path)
    end
  end
end
---------------------------------------------------------------


# Add this line to your config/routes.rb file
--------------------config/routes.rb
resources :sessions, only: [:new, :create, :destroy]
--------------------------------------------------------------------------------


--------------------app/controllers/sessions_controller.rb
class SessionsController < ApplicationController

  def new
  end

  def create
  end

  def destroy
  end

end
--------------------------------------------------------------------------------


--------------------app/views/sessions/new.html.erb
<% provide(:title, 'Login') %>

<div class='row'>
  <div class='span12'>
    <h1>Login</h1>
    
    <p>Your login form will go here</p>

  </div>
</div>
--------------------------------------------------------------------------------


~/# bundle exec rspec spec/requests/session_spec.rb -e "login form link should be displayed in the header"


~/# bundle exec rspec spec/requests/session_spec.rb -e "login form elements"


----------app/views/layouts/application.html.erb
<!DOCTYPE html>
<html>
<head>
  <title><%= full_title(yield(:title)) %></title>
  <%= stylesheet_link_tag    "application", :media => "all" %>
  <%= javascript_include_tag "application" %>
  <%= csrf_meta_tags %>
</head>
<body>

  <%= render 'layouts/header' %>

  <div class="container"> 

    <% flash.each do |key, value| %>
      <div class="alert alert-<%= key %>"><%= value %></div>
    <% end %> 

    <%= yield %>
    <hr />
    <%= render 'layouts/footer' %>
  </div>

</body>
</html>
---------------------------------------------------------------


~/# bundle exec rspec spec/requests/session_spec.rb -e "login form submission"


----------app/helpers/session_helper.rb
module SessionHelper
  
  def sign_in(user)
    cookies[:current_user_id] = user.id
    self.current_user = user
  end

  def sign_out_user
    cookies.delete :current_user_id
  end

  def current_user=(user)
    @current_user = user
  end
  
  def current_user
    @current_user ||= User.find_by_id(cookies[:current_user_id])
  end

  def signed_in?
    !current_user.nil?
  end
end
---------------------------------------------------------------


----------app/controllers/application_controller.rb
class ApplicationController < ActionController::Base
  protect_from_forgery
  include SessionHelper
end
---------------------------------------------------------------


~/# bundle exec rspec spec/requests/session_spec.rb -e "customized header"
~/# bundle exec rspec spec/requests/session_spec.rb -e "logging out"
~/# bundle exec rspec 


~/# git status                            # see what we modified
~/# git add -A                            # add all the changes
~/# git commit -m "authentication"

~/# git checkout master                   # merge it back into master
~/# git merge login

~/# git push origin master                # github
~/# git push heroku master                # heroku
